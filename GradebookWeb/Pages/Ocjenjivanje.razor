@page "/ocjenjivanje"
@using System.ComponentModel
@attribute [Authorize]
@inject IProvjeraRepository ProvjeraRepository
@inject IPredmetRepository PredmetRepository

<div id="provjere" class="planner-provjere">
    <header>
        <div class="module-title">
            <div class="title">OCJENJIVANJE PROVJERA</div>
            <div class="underline"></div>
        </div>
        <div class="add-provjera" @onclick="@OnAddProvjera">
            <div class="e-icon-add e-icons"></div>
            <div class="add-provjera-label">Dodaj Novu</div>
        </div>
    </header>
    <div class="provjera-detail-wrapper">
        <div class="patient-operations">
            <SfButton CssClass="e-normal add-details" @onclick="@OnAddProvjera" IsPrimary="true">Dodaj Novu Provjeru</SfButton>
        </div>
    </div>
    @if (_provjere.Count <= 0)
    {
        <p>Nema unesenih provjera u sustavu</p>
    }
    else
    {
        <div class="patient-display">
            <SfGrid DataSource="@_provjere" AllowSorting="true" AllowPaging="true">
                <GridEvents RowSelected="RowSelectHandler" OnRecordDoubleClick="@OnDoubleClick" TValue="ProvjeraGridModel"></GridEvents>
                <GridColumns>
                    <GridColumn Field="Datum" HeaderText="Vrijeme" TextAlign="@TextAlign.Left" Width="15%" Format="dd.MM.yyyy"></GridColumn>
                    <GridColumn Field="Naziv" HeaderText="Naziv" TextAlign="@TextAlign.Center" Width="15%"></GridColumn>
                    <!--Dodaj ime onoga tko je postavio provjeru, ako možeš-->
                    <GridColumn Field="Predmet" HeaderText="Predmet" TextAlign="@TextAlign.Center" Width="15%"></GridColumn>
                    <GridColumn Field="Opis" HeaderText="Opis" TextAlign="@TextAlign.Center" Width="45%"></GridColumn>
                    <GridColumn TextAlign="@TextAlign.Center" Width="5%">
                        <Template>
                            <button class="e-btn btn-danger" @onclick="@(() => OnDeleteClick(context))"><i class="fas fa-trash"></i></button>
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
            @if (_selectedProvjera == null)
            {
                <div class="e-statustext">Niste odabrali niti jednu provjeru.</div>
            }
            else
            {
                <div class="e-statustext">Prikaz ocjena za provjeru: <b>@_selectedProvjera.Naziv - @_selectedProvjera.Datum</b></div>
                @if (_ocjeneSelectedProvjere.Count == 0)
                {
                    <p>Odabrana provjera još nema upisanih ocjena.</p>
                    <div class="patient-operations">
                        <SfButton CssClass="e-normal add-details" @onclick="@OnAddOcjena" IsPrimary="true">Dodaj Ocjenu Za Provjeru</SfButton>
                    </div>

                }
                else
                {
                    <SfGrid DataSource="@_ocjeneSelectedProvjere">
                        <GridColumns>
                            <GridColumn Field="UcenikIme" HeaderText="Ime Učenika" Width="110"></GridColumn>
                            <GridColumn Field="OstvareniBodovi" HeaderText="Ostvareni Bodovi" Width="50"></GridColumn>
                            <GridColumn Field="Ocjena1" HeaderText="Ocjena" Width="50"></GridColumn>
                            <GridColumn Field="Bilješka" HeaderText="Bilješka" Width="200"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
            }
        </div>
    }
</div>

@if (_showProvjeraEditDialog)
{
    <SfDialog @ref="@_dialogObj" Target="body" Width="400px" CssClass="new-patient-dialog" IsModal="true" @bind-Visible="@_showProvjeraEditDialog"
              ShowCloseIcon="true" Header="@_provjeraHeader" AnimationSettings="@_dialogAnimation">
        <ChildContent>
            <EditForm Model="@ProvjeraEditModel" OnValidSubmit="@HandleSubmitProvjera">
                <DataAnnotationsValidator />

                <div class="field-container">
                    <SfTextBox CssClass="patient-name e-field" Placeholder="Naziv Provjere" FloatLabelType="@FloatLabelType.Always" @bind-Value="@ProvjeraEditModel.Naziv"></SfTextBox>
                    <ValidationMessage For="@(() => ProvjeraEditModel.Naziv)" />
                </div>
                <div class="field-container">
                    <SfDropDownList TItem="@PredmetGridModel" TValue="int?" DataSource="@_allPredmeti" FloatLabelType="@FloatLabelType.Always" CssClass="e-field" Placeholder="Iz Predmeta" @bind-Value="@ProvjeraEditModel.IdPredmet">
                        <DropDownListFieldSettings Text="Naziv" Value="IdPredmet"></DropDownListFieldSettings>
                    </SfDropDownList>
                    <ValidationMessage For="@(() => ProvjeraEditModel.IdPredmet)" />
                </div>
                <div class="field-container">
                    <SfDatePicker CssClass="e-field" Placeholder="Datum Provedbe Provjere" @bind-Value="@ProvjeraEditModel.Datum" Min="@DateTime.Now.AddDays(2)"
                                  FloatLabelType="@FloatLabelType.Always" ShowClearButton="false"></SfDatePicker>
                    <ValidationMessage For="@(() => ProvjeraEditModel.Datum)" />
                </div>
                <div class="field-container">
                    <SfTextBox Multiline="true" CssClass="e-field" Placeholder="Detalji o Provjeri" FloatLabelType="@FloatLabelType.Always" @bind-Value="@ProvjeraEditModel.Opis"></SfTextBox>
                    <ValidationMessage For="@(() => ProvjeraEditModel.Opis)" />
                </div>
                <div class="e-footer-content">
                    <div class="field-container">
                        <button type="button" class="e-btn e-normal" @onclick="@OnCancelClick">Cancel</button>
                        <button type="submit" class="e-btn e-normal e-primary">@SaveButton</button>
                    </div>
                </div>
            </EditForm>
        </ChildContent>
    </SfDialog>
}

@if (_showOcjenaEditDialog)
{
    <SfDialog @ref="@_dialog2Obj" Target="body" Width="400px" CssClass="new-patient-dialog" IsModal="true" @bind-Visible="@_showOcjenaEditDialog"
              ShowCloseIcon="true" Header="@_ocjenaHeader" AnimationSettings="@_dialogAnimation">
        <ChildContent>
            <EditForm Model="@OcjenaEditModel" OnValidSubmit="@HandleSubmitOcjena">
                <DataAnnotationsValidator />

                <div class="field-container">
                    <SfDropDownList FloatLabelType="@FloatLabelType.Always" CssClass="e-field" Placeholder="Iz Provjere" @bind-Value="@OcjenaEditModel.IdProvjera" DataSource="@_provjere">
                        <DropDownListFieldSettings Text="Naziv" Value="IdProvjera"></DropDownListFieldSettings>
                    </SfDropDownList>
                    <ValidationMessage For="@(() => OcjenaEditModel.IdProvjera)" />
                </div>
                <div class="field-container">
                    <SfDropDownList FloatLabelType="@FloatLabelType.Always" CssClass="e-field" Placeholder="Učenik" @bind-Value="@OcjenaEditModel.IdUčenik" DataSource="@_allUceniciProvjere">
                        <DropDownListFieldSettings Text="PunoIme" Value="IdKorisnik"></DropDownListFieldSettings>
                    </SfDropDownList>
                    <ValidationMessage For="@(() => OcjenaEditModel.IdUčenik)" />
                </div>
                <div class="field-container">
                    <SfNumericTextBox TValue="int?" Min=0 Max=100 Step=1 CssClass="e-field" Placeholder="Ostvareni Bodovi" FloatLabelType="@FloatLabelType.Always" @bind-Value="@OcjenaEditModel.OstvareniBodovi"></SfNumericTextBox>
                    <ValidationMessage For="@(() => OcjenaEditModel.OstvareniBodovi)" />
                </div>
                <div class="field-container">
                    <SfNumericTextBox TValue="int" Min=0 Max=5 Step=1 CssClass="e-field" Placeholder="Ocjena" FloatLabelType="@FloatLabelType.Always" @bind-Value="@OcjenaEditModel.Ocjena1"></SfNumericTextBox>
                    <ValidationMessage For="@(() => OcjenaEditModel.Ocjena1)" />
                </div>
                <div class="field-container">
                    <SfTextBox Multiline="true" CssClass="e-field" Placeholder="Bilješka" FloatLabelType="@FloatLabelType.Always" @bind-Value="@OcjenaEditModel.Bilješka"></SfTextBox>
                    <ValidationMessage For="@(() => OcjenaEditModel.Bilješka)" />
                </div>
                <div class="e-footer-content">
                    <div class="field-container">
                        <button type="button" class="e-btn e-normal" @onclick="@OnCancelClick">Cancel</button>
                        <button type="submit" class="e-btn e-normal e-primary">@OcjenaSaveButton</button>
                    </div>
                </div>
            </EditForm>
        </ChildContent>
    </SfDialog>
}

<!--POSTAVI DELETE GUMB NEGDJE U TABLICI-->
@if (_isConfirmDelete)
{
    <SfDialog @bind-Visible="@_isConfirmDelete" CssClass="confirm-dialog" Width="auto" IsModal="true" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
                <span>Potvrda brisanja</span>
            </Header>
            <Content>
                Jeste li sigurni da želite obrisati ovu @_whatIsDeleting?
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton ButtonModel="@_deleteBtn" OnClick="@HandleDelete"></DialogButton>
            <DialogButton ButtonModel="@_cancelBtn" OnClick="@HandleCancelDelete"></DialogButton>
        </DialogButtons>
    </SfDialog>
}


@code
{
    public Provjera ProvjeraEditModel { get; set; } = new Provjera();
    private string SaveButton { get; set; } = "Save";
    private bool _showProvjeraEditDialog;
    private SfDialog _dialogObj = new SfDialog();
    private DialogAnimationSettings _dialogAnimation = new DialogAnimationSettings { Effect = DialogEffect.Zoom };
    private string _provjeraHeader;
    private List<PredmetGridModel> _allPredmeti;

    public Ocjena OcjenaEditModel { get; set; } = new Ocjena();
    private string OcjenaSaveButton { get; set; } = "Save";
    private bool _showOcjenaEditDialog;
    private SfDialog _dialog2Obj;
    private string _ocjenaHeader;
    private List<Korisnik> _allUceniciProvjere = new List<Korisnik>();

    private bool _isConfirmDelete;
    private string _whatIsDeleting;
    private ButtonModel _deleteBtn = new ButtonModel { Content = "Da", IsPrimary = true };
    private ButtonModel _cancelBtn = new ButtonModel { Content = "Ups, ne" };

    private List<ProvjeraGridModel> _provjere = new List<ProvjeraGridModel>();
    private ProvjeraGridModel _selectedProvjera;
    private List<OcjenaGridModel> _ocjeneSelectedProvjere;


    protected override void OnInitialized()
    {
        _provjere = ProvjeraGridModel.ToGridModel(ProvjeraRepository.GetAllProvjere());

        _allPredmeti = PredmetGridModel.ToGridModel(PredmetRepository.GetAllPredmeti());
    }

    private void OnAddProvjera(MouseEventArgs args)
    {
        SaveButton = "Save";
        _provjeraHeader = "Nova Provjera";
        ProvjeraEditModel = new Provjera();
        _showProvjeraEditDialog = true;
    }

    private void OnAddOcjena(MouseEventArgs args)
    {
        OcjenaSaveButton = "Save";
        _ocjenaHeader = "Nova Ocjena";
        OcjenaEditModel = new Ocjena { IdProvjera = _selectedProvjera.ProvjeraId };

        _allUceniciProvjere = PredmetRepository.GetAllUceniciPredmeta(_selectedProvjera.PredmetId);

        _showOcjenaEditDialog = true;
    }

    private void OnCancelClick(MouseEventArgs args)
    {
        if (_showProvjeraEditDialog)
        {
            _dialogObj.Hide();
        }
        else
        {
            _dialog2Obj.Hide();
        }
    }

    private void OnDeleteClick(object context)
    {
        if (context is ProvjeraGridModel)
        {
            _whatIsDeleting = "provjeru";
        }
        else if (context is OcjenaGridModel)
        {
            _whatIsDeleting = "ocjenu";
        }

        _isConfirmDelete = true;
    }

    public void RowSelectHandler(RowSelectEventArgs<ProvjeraGridModel> args)
    {
        _selectedProvjera = args.Data;

        _ocjeneSelectedProvjere = ProvjeraRepository.GetOcjeneForProvjera(_selectedProvjera.ProvjeraId).Select(o => new OcjenaGridModel
        {
            UcenikIme = o.IdUčenikNavigation.Ime + o.IdUčenikNavigation.Prezime,
            Bilješka = o.Bilješka,
            Ocjena1 = o.Ocjena1,
            OstvareniBodovi = o.OstvareniBodovi ?? 0
        }).ToList();
    }

    private void OnDoubleClick(RecordDoubleClickEventArgs<ProvjeraGridModel> args)
    {
        ProvjeraEditModel = ProvjeraRepository.GetProvjera(args.RowData.ProvjeraId);

        _provjeraHeader = "Uređivanje provjere";
        SaveButton = "Ažuriraj";
        _showProvjeraEditDialog = true;
    }

    private void HandleSubmitProvjera()
    {
        if (SaveButton == "Save")
        {
            ProvjeraRepository.AddProvjera(ProvjeraEditModel);
            _provjere = ProvjeraGridModel.ToGridModel(ProvjeraRepository.GetAllProvjere());
        }
        else
        {
            ProvjeraRepository.UpdateProvjera(ProvjeraEditModel);
            _provjere = ProvjeraGridModel.ToGridModel(ProvjeraRepository.GetAllProvjere());
        }

        _dialogObj.Hide();
    }

    private void HandleDelete(object context)
    {

    }

    private void HandleCancelDelete()
    {
        _isConfirmDelete = false;
    }

    private void HandleSubmitOcjena()
    {
        if (OcjenaSaveButton == "Save")
        {
            ProvjeraRepository.AddOcjena(OcjenaEditModel);
            if (_selectedProvjera != null)
            {
                _ocjeneSelectedProvjere = OcjenaGridModel.ToGridModel(ProvjeraRepository.GetOcjeneForProvjera(_selectedProvjera.ProvjeraId));
            }
        }
        else
        {
            ProvjeraRepository.UpdateOcjena(OcjenaEditModel);
            if (_selectedProvjera != null)
            {
                _ocjeneSelectedProvjere = OcjenaGridModel.ToGridModel(ProvjeraRepository.GetOcjeneForProvjera(_selectedProvjera.ProvjeraId));
            }
        }
    }

}
